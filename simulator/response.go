package simulator

import (
	"fmt"
	"strings"

	"github.com/baribari2/pulp-calculator/common/types"
	dict "github.com/baribari2/pulp-calculator/dictionary"
)

type Content struct {
	// The distance from the root response
	Distance int `json:"distance"`

	// The message this content contains
	Message string `json:"message"`
}

func NewContent(distance int, message string) *Content {
	return &Content{
		Distance: distance,
		Message:  message,
	}
}

// This response can represent any action in the set of defined actions, namely:
//
//	Comment (Response)
//	Comment (Reply)
//	AbstainVote
//	ValidVoteWithContent
//	InvalidVoteWithContent
//	TrustedReference
//	DistrustedReference
//
// Certain actions also have a score, which is the number of points accumulated by generating engagement
// through said action.
type Response struct {
	// The id of this response
	Id string `json:"id"`

	// The id of the parent response
	ParentId string `json:"parent_id"`

	// The root response
	RootTimestamp int64 `json:"root_timestamp"`

	// The confidence of the user that posted this action
	Confidence float64 `json:"confidence"`

	// Total points, accumulated from all interactions generated by this action
	Score int64 `json:"score"`

	// The score of the last action
	LastScore int64 `json:"last_score"`

	// The amount of times the score hasn't changed
	InactiveCount int64 `json:"inactive_count"`

	//The children of this response
	Children []*Response `json:"children"`

	// The timestamp of this action's creation
	Timestamp int64 `json:"timestamp"`

	// The action that generated this response
	types.Action `json:"action"`

	// The amount of times this action has been viewed
	Exposure int64 `json:"exposure"`

	// The engagements generated by this action
	Engagements *types.Engagements `json:"engagements"`

	// The attributes of the response, used in scoring the content
	Attributes *types.Attributes `json:"attributes"`

	// This will ultimately be multimedia content
	Content *Content `json:"content"`
}

// Adds a child to the adjencey list of children responses
func (n *Response) AddChild(child *Response) {
	n.Children = append(n.Children, child)
}

// Returns the children of this response
func (n *Response) GetChildren() []*Response {
	return n.Children
}

// Returns the Id of the parent response
func (n *Response) GetParentId() string {
	return n.ParentId
}

// Reutrns the Id of this response
func (n *Response) GetId() string {
	return n.Id
}

func (n *Response) GetTimestamp() int64 {
	return n.Timestamp
}

func (n *Response) CalculateContentAttributesScore(cfg *types.Config) int {
	var cas = 0

	cas += (strings.Count(n.Content.Message, "https://") + strings.Count(n.Content.Message, "http://")) * types.ReferencesBonus

	for _, word := range strings.Split(n.Content.Message, " ") {
		if dict.IsMasteryWord("politics", word) {
			n.Attributes.MasteryVocab++
		}

		cas += int(types.MasteryVocabBonus * n.Attributes.MasteryVocab)

		if !dict.IsWord_(word) {
			n.Attributes.SpellingMistakes++
		}

		cas -= int(types.SpellingMistakesPenalty * n.Attributes.SpellingMistakes)
	}

	cas += types.LengthBonus * len(strings.Split(n.Content.Message, " "))

	return cas
}

func (n *Response) CalculateEngagementAttributesScore() int {
	var eas = 0

	for _, v := range n.Engagements.Votes {
		switch v {
		case types.ValidVoteType:
			eas++
		case types.InvalidVoteType:
			eas++
		case types.AbstainVoteType:
			eas++
		}
	}

	hc := 0
	am := 0
	for _, report := range n.Engagements.Reports {
		if report.Reason == types.ReasonHarmfulToOthers {
			hc++
		}

		if report.Reason == types.ReasonAbuseOfPlatform {
			am++
		}
	}

	if eas == 0 {
		return 0
	}

	eas -= int((float64(hc) * types.HarmfulToOthersPenalty) + (float64(am) * types.AbuseOfPlatformPenalty))
	eas -= int(float64(n.Engagements.HideCount) * types.HidePenalty)
	eas -= int(float64(n.Content.Distance) * types.DistancePenalty)

	return eas
}

// Calculates the score of a response, based on its action, content, vote, and confidence.
func (n *Response) CalculateScore(cfg *types.Config) (int, error) {
	// Set the score equal to the base points of the action
	var score int = int(n.Action.BasePoints())

	if n.Score != 0 {
		score += int(n.Score)
	}

	// If the action is a vote w/o content it's a constant - return the base value
	if n.Action == types.ValidVote || n.Action == types.InvalidVote || n.Action == types.AbstainVote {
		score += int(n.Action.BasePoints())

		return score, nil
	}

	// If the action contians content, then calculate a portion of the score based on the content
	if n.Action == types.CommentResponse ||
		n.Action == types.CommentReply ||
		n.Action == types.ValidVoteWithContent ||
		n.Action == types.InvalidVoteWithContent {

		s, c, err := dict.CountCorrectAndCommonWords(cfg.DictServer, n.Content.Message)
		if err != nil {
			return 0, err
		}

		// The amount of correct words (positive characteristic) - the amount of common words (negative characteristic)
		score += (s - c)
	}

	// If the action has any votes, then calculate a portion of the score based on the votes
	for _, vote := range n.Engagements.Votes {
		switch vote {
		case types.ValidVoteType:
			score += int(types.ValidVote.BasePoints())

		case types.InvalidVoteType:
			score += int(types.InvalidVote.BasePoints())

		case types.AbstainVoteType:
			score += int(types.AbstainVote.BasePoints())

		default:
			return 0, fmt.Errorf("invalid vote type: %v", vote)
		}
	}

	// Calculate a portion of the score based on the confidence
	score += int(n.Confidence * 100)

	// If the action has any references, then calculate a portion of the score based on the references

	return score, nil
}
